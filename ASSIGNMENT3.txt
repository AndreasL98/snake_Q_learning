***  Assignment 3 Snake ***

This is the (close to original) Snake game, see https://www.youtube.com/watch?v=4kIUtQ1vsLY
https://en.wikipedia.org/wiki/Snake_(video_game_genre).

We will move a "snake" around in a square world using up/down/right/left
arrow keys (world is 500x500 pixel). There's an apple we will try to hit.
If so snake will grow with one "segment", we'll increment our points and another (new) apple
will appear at some random position. If the snake hit borders or itself the game is over.

This is an event driven program, the program responds to events generated
by the operating system (as an indication of some hardware action, for example key pressed).
The events are sent as parameters to special function, "event listeners".
This is called event handling. All event handling is already implemented but
you could have a look at the function key_press_event_cb in main.c


Some points
--------------
The snake is composed of a head (red), segments (blue) and a tail (blue). From start there's
only the head and tail (length is 2).

The snake should be implemented as a linked list.
Snake is default moving right, and starts (head) at 100, 100
Each move distance is the same as the width/height of a segment.
The snake can only collide with itself if the length is greater than 2.
If changing direction directly up/down or left/right and length is greater
then 2 the snake will collide with itself.

Files
-----
The application is divided over a few files
- main.c, is the graphics, nothing to do for you, it's all implemented.
- snake.h. File with declarations of  functions used by main.c. Nothing to do for you.
- snake.c. Definitions of the top level functions and helper functions. You implement.
- test.c. A program for testing only. You can, if needed, modify or add tests. The test
prints true if passing (as usual)

Implementation
--------------
There's no overall algorithm for the flow of the program to implement.
The flow is handled by a (built in) timer, moving the snake. Keyboard presses are
Also handled by the “system”. You only need to implement the functions,
not try to call them in any way. See supplied pdf.

See // TODO notations where to code.

Testing
-------
Inspect file test.c !!!

To run tests, select test from the drop down list in menu. Click run.
All should print true as usual.
NOTE: It's very efficient to debug the tests!

Recommended workflow
--------------------
The program will not work from the outset, will crash ...

1.  Inspect snake.pdf. As usual start with the simplest functions and implement test.

2.  Implement and test snake_new, use segment_new.

3.  Implement and test snake_shift. See comments in code.

4.  Implement and test snake_move.

5.  Implement the rest,  ...

